// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.698)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Sample.API.Models
{
    using static Sample.API.Runtime.Extensions;

    /// <summary>DbSystemShape resource model</summary>
    public partial class DbSystemShapeProperties :
        Sample.API.Models.IDbSystemShapeProperties,
        Sample.API.Models.IDbSystemShapePropertiesInternal
    {

        /// <summary>Backing field for <see cref="AvailableCoreCount" /> property.</summary>
        private int _availableCoreCount;

        /// <summary>
        /// The maximum number of CPU cores that can be enabled on the DB system for this shape.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public int AvailableCoreCount { get => this._availableCoreCount; }

        /// <summary>Backing field for <see cref="AvailableCoreCountPerNode" /> property.</summary>
        private int? _availableCoreCountPerNode;

        /// <summary>
        /// The maximum number of CPU cores per database node that can be enabled for this shape. Only applicable to the flex Exadata
        /// shape and ExaCC Elastic shapes.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public int? AvailableCoreCountPerNode { get => this._availableCoreCountPerNode; }

        /// <summary>Backing field for <see cref="AvailableDataStorageInTbs" /> property.</summary>
        private int? _availableDataStorageInTbs;

        /// <summary>The maximum DATA storage that can be enabled for this shape.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public int? AvailableDataStorageInTbs { get => this._availableDataStorageInTbs; }

        /// <summary>Backing field for <see cref="AvailableDataStoragePerServerInTbs" /> property.</summary>
        private double? _availableDataStoragePerServerInTbs;

        /// <summary>
        /// The maximum data storage available per storage server for this shape. Only applicable to ExaCC Elastic shapes.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public double? AvailableDataStoragePerServerInTbs { get => this._availableDataStoragePerServerInTbs; }

        /// <summary>Backing field for <see cref="AvailableDbNodePerNodeInGbs" /> property.</summary>
        private int? _availableDbNodePerNodeInGbs;

        /// <summary>
        /// The maximum Db Node storage available per database node for this shape. Only applicable to ExaCC Elastic shapes.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public int? AvailableDbNodePerNodeInGbs { get => this._availableDbNodePerNodeInGbs; }

        /// <summary>Backing field for <see cref="AvailableDbNodeStorageInGbs" /> property.</summary>
        private int? _availableDbNodeStorageInGbs;

        /// <summary>The maximum Db Node storage that can be enabled for this shape.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public int? AvailableDbNodeStorageInGbs { get => this._availableDbNodeStorageInGbs; }

        /// <summary>Backing field for <see cref="AvailableMemoryInGbs" /> property.</summary>
        private int? _availableMemoryInGbs;

        /// <summary>The maximum memory that can be enabled for this shape.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public int? AvailableMemoryInGbs { get => this._availableMemoryInGbs; }

        /// <summary>Backing field for <see cref="AvailableMemoryPerNodeInGbs" /> property.</summary>
        private int? _availableMemoryPerNodeInGbs;

        /// <summary>
        /// The maximum memory available per database node for this shape. Only applicable to ExaCC Elastic shapes.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public int? AvailableMemoryPerNodeInGbs { get => this._availableMemoryPerNodeInGbs; }

        /// <summary>Backing field for <see cref="CoreCountIncrement" /> property.</summary>
        private int? _coreCountIncrement;

        /// <summary>
        /// The discrete number by which the CPU core count for this shape can be increased or decreased.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public int? CoreCountIncrement { get => this._coreCountIncrement; }

        /// <summary>Backing field for <see cref="MaxStorageCount" /> property.</summary>
        private int? _maxStorageCount;

        /// <summary>
        /// The maximum number of Exadata storage servers available for the Exadata infrastructure.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public int? MaxStorageCount { get => this._maxStorageCount; }

        /// <summary>Backing field for <see cref="MaximumNodeCount" /> property.</summary>
        private int? _maximumNodeCount;

        /// <summary>The maximum number of database nodes available for this shape.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public int? MaximumNodeCount { get => this._maximumNodeCount; }

        /// <summary>Backing field for <see cref="MinCoreCountPerNode" /> property.</summary>
        private int? _minCoreCountPerNode;

        /// <summary>The minimum number of CPU cores that can be enabled per node for this shape.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public int? MinCoreCountPerNode { get => this._minCoreCountPerNode; }

        /// <summary>Backing field for <see cref="MinDataStorageInTbs" /> property.</summary>
        private int? _minDataStorageInTbs;

        /// <summary>The minimum data storage that need be allocated for this shape.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public int? MinDataStorageInTbs { get => this._minDataStorageInTbs; }

        /// <summary>Backing field for <see cref="MinDbNodeStoragePerNodeInGbs" /> property.</summary>
        private int? _minDbNodeStoragePerNodeInGbs;

        /// <summary>The minimum Db Node storage that need be allocated per node for this shape.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public int? MinDbNodeStoragePerNodeInGbs { get => this._minDbNodeStoragePerNodeInGbs; }

        /// <summary>Backing field for <see cref="MinMemoryPerNodeInGbs" /> property.</summary>
        private int? _minMemoryPerNodeInGbs;

        /// <summary>The minimum memory that need be allocated per node for this shape.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public int? MinMemoryPerNodeInGbs { get => this._minMemoryPerNodeInGbs; }

        /// <summary>Backing field for <see cref="MinStorageCount" /> property.</summary>
        private int? _minStorageCount;

        /// <summary>
        /// The minimum number of Exadata storage servers available for the Exadata infrastructure.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public int? MinStorageCount { get => this._minStorageCount; }

        /// <summary>Backing field for <see cref="MinimumCoreCount" /> property.</summary>
        private int? _minimumCoreCount;

        /// <summary>
        /// The minimum number of CPU cores that can be enabled on the DB system for this shape.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public int? MinimumCoreCount { get => this._minimumCoreCount; }

        /// <summary>Backing field for <see cref="MinimumNodeCount" /> property.</summary>
        private int? _minimumNodeCount;

        /// <summary>The minimum number of database nodes available for this shape.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public int? MinimumNodeCount { get => this._minimumNodeCount; }

        /// <summary>Backing field for <see cref="RuntimeMinimumCoreCount" /> property.</summary>
        private int? _runtimeMinimumCoreCount;

        /// <summary>
        /// The runtime minimum number of CPU cores that can be enabled on the DB system for this shape.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public int? RuntimeMinimumCoreCount { get => this._runtimeMinimumCoreCount; }

        /// <summary>Internal Acessors for AvailableCoreCount</summary>
        int Sample.API.Models.IDbSystemShapePropertiesInternal.AvailableCoreCount { get => this._availableCoreCount; set { {_availableCoreCount = value;} } }

        /// <summary>Internal Acessors for AvailableCoreCountPerNode</summary>
        int? Sample.API.Models.IDbSystemShapePropertiesInternal.AvailableCoreCountPerNode { get => this._availableCoreCountPerNode; set { {_availableCoreCountPerNode = value;} } }

        /// <summary>Internal Acessors for AvailableDataStorageInTbs</summary>
        int? Sample.API.Models.IDbSystemShapePropertiesInternal.AvailableDataStorageInTbs { get => this._availableDataStorageInTbs; set { {_availableDataStorageInTbs = value;} } }

        /// <summary>Internal Acessors for AvailableDataStoragePerServerInTbs</summary>
        double? Sample.API.Models.IDbSystemShapePropertiesInternal.AvailableDataStoragePerServerInTbs { get => this._availableDataStoragePerServerInTbs; set { {_availableDataStoragePerServerInTbs = value;} } }

        /// <summary>Internal Acessors for AvailableDbNodePerNodeInGbs</summary>
        int? Sample.API.Models.IDbSystemShapePropertiesInternal.AvailableDbNodePerNodeInGbs { get => this._availableDbNodePerNodeInGbs; set { {_availableDbNodePerNodeInGbs = value;} } }

        /// <summary>Internal Acessors for AvailableDbNodeStorageInGbs</summary>
        int? Sample.API.Models.IDbSystemShapePropertiesInternal.AvailableDbNodeStorageInGbs { get => this._availableDbNodeStorageInGbs; set { {_availableDbNodeStorageInGbs = value;} } }

        /// <summary>Internal Acessors for AvailableMemoryInGbs</summary>
        int? Sample.API.Models.IDbSystemShapePropertiesInternal.AvailableMemoryInGbs { get => this._availableMemoryInGbs; set { {_availableMemoryInGbs = value;} } }

        /// <summary>Internal Acessors for AvailableMemoryPerNodeInGbs</summary>
        int? Sample.API.Models.IDbSystemShapePropertiesInternal.AvailableMemoryPerNodeInGbs { get => this._availableMemoryPerNodeInGbs; set { {_availableMemoryPerNodeInGbs = value;} } }

        /// <summary>Internal Acessors for CoreCountIncrement</summary>
        int? Sample.API.Models.IDbSystemShapePropertiesInternal.CoreCountIncrement { get => this._coreCountIncrement; set { {_coreCountIncrement = value;} } }

        /// <summary>Internal Acessors for MaxStorageCount</summary>
        int? Sample.API.Models.IDbSystemShapePropertiesInternal.MaxStorageCount { get => this._maxStorageCount; set { {_maxStorageCount = value;} } }

        /// <summary>Internal Acessors for MaximumNodeCount</summary>
        int? Sample.API.Models.IDbSystemShapePropertiesInternal.MaximumNodeCount { get => this._maximumNodeCount; set { {_maximumNodeCount = value;} } }

        /// <summary>Internal Acessors for MinCoreCountPerNode</summary>
        int? Sample.API.Models.IDbSystemShapePropertiesInternal.MinCoreCountPerNode { get => this._minCoreCountPerNode; set { {_minCoreCountPerNode = value;} } }

        /// <summary>Internal Acessors for MinDataStorageInTbs</summary>
        int? Sample.API.Models.IDbSystemShapePropertiesInternal.MinDataStorageInTbs { get => this._minDataStorageInTbs; set { {_minDataStorageInTbs = value;} } }

        /// <summary>Internal Acessors for MinDbNodeStoragePerNodeInGbs</summary>
        int? Sample.API.Models.IDbSystemShapePropertiesInternal.MinDbNodeStoragePerNodeInGbs { get => this._minDbNodeStoragePerNodeInGbs; set { {_minDbNodeStoragePerNodeInGbs = value;} } }

        /// <summary>Internal Acessors for MinMemoryPerNodeInGbs</summary>
        int? Sample.API.Models.IDbSystemShapePropertiesInternal.MinMemoryPerNodeInGbs { get => this._minMemoryPerNodeInGbs; set { {_minMemoryPerNodeInGbs = value;} } }

        /// <summary>Internal Acessors for MinStorageCount</summary>
        int? Sample.API.Models.IDbSystemShapePropertiesInternal.MinStorageCount { get => this._minStorageCount; set { {_minStorageCount = value;} } }

        /// <summary>Internal Acessors for MinimumCoreCount</summary>
        int? Sample.API.Models.IDbSystemShapePropertiesInternal.MinimumCoreCount { get => this._minimumCoreCount; set { {_minimumCoreCount = value;} } }

        /// <summary>Internal Acessors for MinimumNodeCount</summary>
        int? Sample.API.Models.IDbSystemShapePropertiesInternal.MinimumNodeCount { get => this._minimumNodeCount; set { {_minimumNodeCount = value;} } }

        /// <summary>Internal Acessors for RuntimeMinimumCoreCount</summary>
        int? Sample.API.Models.IDbSystemShapePropertiesInternal.RuntimeMinimumCoreCount { get => this._runtimeMinimumCoreCount; set { {_runtimeMinimumCoreCount = value;} } }

        /// <summary>Internal Acessors for ShapeFamily</summary>
        string Sample.API.Models.IDbSystemShapePropertiesInternal.ShapeFamily { get => this._shapeFamily; set { {_shapeFamily = value;} } }

        /// <summary>Backing field for <see cref="ShapeFamily" /> property.</summary>
        private string _shapeFamily;

        /// <summary>The family of the shape used for the DB system.</summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public string ShapeFamily { get => this._shapeFamily; }

        /// <summary>Creates an new <see cref="DbSystemShapeProperties" /> instance.</summary>
        public DbSystemShapeProperties()
        {

        }
    }
    /// DbSystemShape resource model
    public partial interface IDbSystemShapeProperties :
        Sample.API.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The maximum number of CPU cores that can be enabled on the DB system for this shape.
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = true,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The maximum number of CPU cores that can be enabled on the DB system for this shape.",
        SerializedName = @"availableCoreCount",
        PossibleTypes = new [] { typeof(int) })]
        int AvailableCoreCount { get;  }
        /// <summary>
        /// The maximum number of CPU cores per database node that can be enabled for this shape. Only applicable to the flex Exadata
        /// shape and ExaCC Elastic shapes.
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The maximum number of CPU cores per database node that can be enabled for this shape. Only applicable to the flex Exadata shape and ExaCC Elastic shapes.",
        SerializedName = @"availableCoreCountPerNode",
        PossibleTypes = new [] { typeof(int) })]
        int? AvailableCoreCountPerNode { get;  }
        /// <summary>The maximum DATA storage that can be enabled for this shape.</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The maximum DATA storage that can be enabled for this shape.",
        SerializedName = @"availableDataStorageInTbs",
        PossibleTypes = new [] { typeof(int) })]
        int? AvailableDataStorageInTbs { get;  }
        /// <summary>
        /// The maximum data storage available per storage server for this shape. Only applicable to ExaCC Elastic shapes.
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The maximum data storage available per storage server for this shape. Only applicable to ExaCC Elastic shapes.",
        SerializedName = @"availableDataStoragePerServerInTbs",
        PossibleTypes = new [] { typeof(double) })]
        double? AvailableDataStoragePerServerInTbs { get;  }
        /// <summary>
        /// The maximum Db Node storage available per database node for this shape. Only applicable to ExaCC Elastic shapes.
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The maximum Db Node storage available per database node for this shape. Only applicable to ExaCC Elastic shapes.",
        SerializedName = @"availableDbNodePerNodeInGbs",
        PossibleTypes = new [] { typeof(int) })]
        int? AvailableDbNodePerNodeInGbs { get;  }
        /// <summary>The maximum Db Node storage that can be enabled for this shape.</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The maximum Db Node storage that can be enabled for this shape.",
        SerializedName = @"availableDbNodeStorageInGbs",
        PossibleTypes = new [] { typeof(int) })]
        int? AvailableDbNodeStorageInGbs { get;  }
        /// <summary>The maximum memory that can be enabled for this shape.</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The maximum memory that can be enabled for this shape.",
        SerializedName = @"availableMemoryInGbs",
        PossibleTypes = new [] { typeof(int) })]
        int? AvailableMemoryInGbs { get;  }
        /// <summary>
        /// The maximum memory available per database node for this shape. Only applicable to ExaCC Elastic shapes.
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The maximum memory available per database node for this shape. Only applicable to ExaCC Elastic shapes.",
        SerializedName = @"availableMemoryPerNodeInGbs",
        PossibleTypes = new [] { typeof(int) })]
        int? AvailableMemoryPerNodeInGbs { get;  }
        /// <summary>
        /// The discrete number by which the CPU core count for this shape can be increased or decreased.
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The discrete number by which the CPU core count for this shape can be increased or decreased.",
        SerializedName = @"coreCountIncrement",
        PossibleTypes = new [] { typeof(int) })]
        int? CoreCountIncrement { get;  }
        /// <summary>
        /// The maximum number of Exadata storage servers available for the Exadata infrastructure.
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The maximum number of Exadata storage servers available for the Exadata infrastructure.",
        SerializedName = @"maxStorageCount",
        PossibleTypes = new [] { typeof(int) })]
        int? MaxStorageCount { get;  }
        /// <summary>The maximum number of database nodes available for this shape.</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The maximum number of database nodes available for this shape.",
        SerializedName = @"maximumNodeCount",
        PossibleTypes = new [] { typeof(int) })]
        int? MaximumNodeCount { get;  }
        /// <summary>The minimum number of CPU cores that can be enabled per node for this shape.</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The minimum number of CPU cores that can be enabled per node for this shape.",
        SerializedName = @"minCoreCountPerNode",
        PossibleTypes = new [] { typeof(int) })]
        int? MinCoreCountPerNode { get;  }
        /// <summary>The minimum data storage that need be allocated for this shape.</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The minimum data storage that need be allocated for this shape.",
        SerializedName = @"minDataStorageInTbs",
        PossibleTypes = new [] { typeof(int) })]
        int? MinDataStorageInTbs { get;  }
        /// <summary>The minimum Db Node storage that need be allocated per node for this shape.</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The minimum Db Node storage that need be allocated per node for this shape.",
        SerializedName = @"minDbNodeStoragePerNodeInGbs",
        PossibleTypes = new [] { typeof(int) })]
        int? MinDbNodeStoragePerNodeInGbs { get;  }
        /// <summary>The minimum memory that need be allocated per node for this shape.</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The minimum memory that need be allocated per node for this shape.",
        SerializedName = @"minMemoryPerNodeInGbs",
        PossibleTypes = new [] { typeof(int) })]
        int? MinMemoryPerNodeInGbs { get;  }
        /// <summary>
        /// The minimum number of Exadata storage servers available for the Exadata infrastructure.
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The minimum number of Exadata storage servers available for the Exadata infrastructure.",
        SerializedName = @"minStorageCount",
        PossibleTypes = new [] { typeof(int) })]
        int? MinStorageCount { get;  }
        /// <summary>
        /// The minimum number of CPU cores that can be enabled on the DB system for this shape.
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The minimum number of CPU cores that can be enabled on the DB system for this shape.",
        SerializedName = @"minimumCoreCount",
        PossibleTypes = new [] { typeof(int) })]
        int? MinimumCoreCount { get;  }
        /// <summary>The minimum number of database nodes available for this shape.</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The minimum number of database nodes available for this shape.",
        SerializedName = @"minimumNodeCount",
        PossibleTypes = new [] { typeof(int) })]
        int? MinimumNodeCount { get;  }
        /// <summary>
        /// The runtime minimum number of CPU cores that can be enabled on the DB system for this shape.
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The runtime minimum number of CPU cores that can be enabled on the DB system for this shape.",
        SerializedName = @"runtimeMinimumCoreCount",
        PossibleTypes = new [] { typeof(int) })]
        int? RuntimeMinimumCoreCount { get;  }
        /// <summary>The family of the shape used for the DB system.</summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The family of the shape used for the DB system.",
        SerializedName = @"shapeFamily",
        PossibleTypes = new [] { typeof(string) })]
        string ShapeFamily { get;  }

    }
    /// DbSystemShape resource model
    internal partial interface IDbSystemShapePropertiesInternal

    {
        /// <summary>
        /// The maximum number of CPU cores that can be enabled on the DB system for this shape.
        /// </summary>
        int AvailableCoreCount { get; set; }
        /// <summary>
        /// The maximum number of CPU cores per database node that can be enabled for this shape. Only applicable to the flex Exadata
        /// shape and ExaCC Elastic shapes.
        /// </summary>
        int? AvailableCoreCountPerNode { get; set; }
        /// <summary>The maximum DATA storage that can be enabled for this shape.</summary>
        int? AvailableDataStorageInTbs { get; set; }
        /// <summary>
        /// The maximum data storage available per storage server for this shape. Only applicable to ExaCC Elastic shapes.
        /// </summary>
        double? AvailableDataStoragePerServerInTbs { get; set; }
        /// <summary>
        /// The maximum Db Node storage available per database node for this shape. Only applicable to ExaCC Elastic shapes.
        /// </summary>
        int? AvailableDbNodePerNodeInGbs { get; set; }
        /// <summary>The maximum Db Node storage that can be enabled for this shape.</summary>
        int? AvailableDbNodeStorageInGbs { get; set; }
        /// <summary>The maximum memory that can be enabled for this shape.</summary>
        int? AvailableMemoryInGbs { get; set; }
        /// <summary>
        /// The maximum memory available per database node for this shape. Only applicable to ExaCC Elastic shapes.
        /// </summary>
        int? AvailableMemoryPerNodeInGbs { get; set; }
        /// <summary>
        /// The discrete number by which the CPU core count for this shape can be increased or decreased.
        /// </summary>
        int? CoreCountIncrement { get; set; }
        /// <summary>
        /// The maximum number of Exadata storage servers available for the Exadata infrastructure.
        /// </summary>
        int? MaxStorageCount { get; set; }
        /// <summary>The maximum number of database nodes available for this shape.</summary>
        int? MaximumNodeCount { get; set; }
        /// <summary>The minimum number of CPU cores that can be enabled per node for this shape.</summary>
        int? MinCoreCountPerNode { get; set; }
        /// <summary>The minimum data storage that need be allocated for this shape.</summary>
        int? MinDataStorageInTbs { get; set; }
        /// <summary>The minimum Db Node storage that need be allocated per node for this shape.</summary>
        int? MinDbNodeStoragePerNodeInGbs { get; set; }
        /// <summary>The minimum memory that need be allocated per node for this shape.</summary>
        int? MinMemoryPerNodeInGbs { get; set; }
        /// <summary>
        /// The minimum number of Exadata storage servers available for the Exadata infrastructure.
        /// </summary>
        int? MinStorageCount { get; set; }
        /// <summary>
        /// The minimum number of CPU cores that can be enabled on the DB system for this shape.
        /// </summary>
        int? MinimumCoreCount { get; set; }
        /// <summary>The minimum number of database nodes available for this shape.</summary>
        int? MinimumNodeCount { get; set; }
        /// <summary>
        /// The runtime minimum number of CPU cores that can be enabled on the DB system for this shape.
        /// </summary>
        int? RuntimeMinimumCoreCount { get; set; }
        /// <summary>The family of the shape used for the DB system.</summary>
        string ShapeFamily { get; set; }

    }
}