// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.2, generator: @autorest/powershell@4.0.698)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Sample.API.Models
{
    using static Sample.API.Runtime.Extensions;

    /// <summary>Connection strings to connect to an Oracle Autonomous Database.</summary>
    public partial class ConnectionStringType :
        Sample.API.Models.IConnectionStringType,
        Sample.API.Models.IConnectionStringTypeInternal
    {

        /// <summary>
        /// The High database service provides the highest level of resources to each SQL statement resulting in the highest performance,
        /// but supports the fewest number of concurrent SQL statements.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inlined)]
        public string AllConnectionStringHigh { get => ((Sample.API.Models.IAllConnectionStringTypeInternal)AllConnectionStrings).High; set => ((Sample.API.Models.IAllConnectionStringTypeInternal)AllConnectionStrings).High = value ?? null; }

        /// <summary>
        /// The Low database service provides the least level of resources to each SQL statement, but supports the most number of
        /// concurrent SQL statements.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inlined)]
        public string AllConnectionStringLow { get => ((Sample.API.Models.IAllConnectionStringTypeInternal)AllConnectionStrings).Low; set => ((Sample.API.Models.IAllConnectionStringTypeInternal)AllConnectionStrings).Low = value ?? null; }

        /// <summary>
        /// The Medium database service provides a lower level of resources to each SQL statement potentially resulting a lower level
        /// of performance, but supports more concurrent SQL statements.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Inlined)]
        public string AllConnectionStringMedium { get => ((Sample.API.Models.IAllConnectionStringTypeInternal)AllConnectionStrings).Medium; set => ((Sample.API.Models.IAllConnectionStringTypeInternal)AllConnectionStrings).Medium = value ?? null; }

        /// <summary>Backing field for <see cref="AllConnectionStrings" /> property.</summary>
        private Sample.API.Models.IAllConnectionStringType _allConnectionStrings;

        /// <summary>
        /// Returns all connection strings that can be used to connect to the Autonomous Database.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        internal Sample.API.Models.IAllConnectionStringType AllConnectionStrings { get => (this._allConnectionStrings = this._allConnectionStrings ?? new Sample.API.Models.AllConnectionStringType()); set => this._allConnectionStrings = value; }

        /// <summary>Backing field for <see cref="Dedicated" /> property.</summary>
        private string _dedicated;

        /// <summary>
        /// The database service provides the least level of resources to each SQL statement, but supports the most number of concurrent
        /// SQL statements.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public string Dedicated { get => this._dedicated; set => this._dedicated = value; }

        /// <summary>Backing field for <see cref="High" /> property.</summary>
        private string _high;

        /// <summary>
        /// The High database service provides the highest level of resources to each SQL statement resulting in the highest performance,
        /// but supports the fewest number of concurrent SQL statements.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public string High { get => this._high; set => this._high = value; }

        /// <summary>Backing field for <see cref="Low" /> property.</summary>
        private string _low;

        /// <summary>
        /// The Low database service provides the least level of resources to each SQL statement, but supports the most number of
        /// concurrent SQL statements.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public string Low { get => this._low; set => this._low = value; }

        /// <summary>Backing field for <see cref="Medium" /> property.</summary>
        private string _medium;

        /// <summary>
        /// The Medium database service provides a lower level of resources to each SQL statement potentially resulting a lower level
        /// of performance, but supports more concurrent SQL statements.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public string Medium { get => this._medium; set => this._medium = value; }

        /// <summary>Backing field for <see cref="Profiles" /> property.</summary>
        private System.Collections.Generic.List<Sample.API.Models.IProfileType> _profiles;

        /// <summary>
        /// A list of connection string profiles to allow clients to group, filter and select connection string values based on structured
        /// metadata.
        /// </summary>
        [Sample.API.Origin(Sample.API.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Sample.API.Models.IProfileType> Profiles { get => this._profiles; set => this._profiles = value; }

        /// <summary>Internal Acessors for AllConnectionStrings</summary>
        Sample.API.Models.IAllConnectionStringType Sample.API.Models.IConnectionStringTypeInternal.AllConnectionStrings { get => (this._allConnectionStrings = this._allConnectionStrings ?? new Sample.API.Models.AllConnectionStringType()); set { {_allConnectionStrings = value;} } }

        /// <summary>Creates an new <see cref="ConnectionStringType" /> instance.</summary>
        public ConnectionStringType()
        {

        }
    }
    /// Connection strings to connect to an Oracle Autonomous Database.
    public partial interface IConnectionStringType :
        Sample.API.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The High database service provides the highest level of resources to each SQL statement resulting in the highest performance,
        /// but supports the fewest number of concurrent SQL statements.
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The High database service provides the highest level of resources to each SQL statement resulting in the highest performance, but supports the fewest number of concurrent SQL statements.",
        SerializedName = @"high",
        PossibleTypes = new [] { typeof(string) })]
        string AllConnectionStringHigh { get; set; }
        /// <summary>
        /// The Low database service provides the least level of resources to each SQL statement, but supports the most number of
        /// concurrent SQL statements.
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The Low database service provides the least level of resources to each SQL statement, but supports the most number of concurrent SQL statements.",
        SerializedName = @"low",
        PossibleTypes = new [] { typeof(string) })]
        string AllConnectionStringLow { get; set; }
        /// <summary>
        /// The Medium database service provides a lower level of resources to each SQL statement potentially resulting a lower level
        /// of performance, but supports more concurrent SQL statements.
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The Medium database service provides a lower level of resources to each SQL statement potentially resulting a lower level of performance, but supports more concurrent SQL statements.",
        SerializedName = @"medium",
        PossibleTypes = new [] { typeof(string) })]
        string AllConnectionStringMedium { get; set; }
        /// <summary>
        /// The database service provides the least level of resources to each SQL statement, but supports the most number of concurrent
        /// SQL statements.
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The database service provides the least level of resources to each SQL statement, but supports the most number of concurrent SQL statements.",
        SerializedName = @"dedicated",
        PossibleTypes = new [] { typeof(string) })]
        string Dedicated { get; set; }
        /// <summary>
        /// The High database service provides the highest level of resources to each SQL statement resulting in the highest performance,
        /// but supports the fewest number of concurrent SQL statements.
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The High database service provides the highest level of resources to each SQL statement resulting in the highest performance, but supports the fewest number of concurrent SQL statements.",
        SerializedName = @"high",
        PossibleTypes = new [] { typeof(string) })]
        string High { get; set; }
        /// <summary>
        /// The Low database service provides the least level of resources to each SQL statement, but supports the most number of
        /// concurrent SQL statements.
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The Low database service provides the least level of resources to each SQL statement, but supports the most number of concurrent SQL statements.",
        SerializedName = @"low",
        PossibleTypes = new [] { typeof(string) })]
        string Low { get; set; }
        /// <summary>
        /// The Medium database service provides a lower level of resources to each SQL statement potentially resulting a lower level
        /// of performance, but supports more concurrent SQL statements.
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The Medium database service provides a lower level of resources to each SQL statement potentially resulting a lower level of performance, but supports more concurrent SQL statements.",
        SerializedName = @"medium",
        PossibleTypes = new [] { typeof(string) })]
        string Medium { get; set; }
        /// <summary>
        /// A list of connection string profiles to allow clients to group, filter and select connection string values based on structured
        /// metadata.
        /// </summary>
        [Sample.API.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of connection string profiles to allow clients to group, filter and select connection string values based on structured metadata.",
        SerializedName = @"profiles",
        PossibleTypes = new [] { typeof(Sample.API.Models.IProfileType) })]
        System.Collections.Generic.List<Sample.API.Models.IProfileType> Profiles { get; set; }

    }
    /// Connection strings to connect to an Oracle Autonomous Database.
    internal partial interface IConnectionStringTypeInternal

    {
        /// <summary>
        /// The High database service provides the highest level of resources to each SQL statement resulting in the highest performance,
        /// but supports the fewest number of concurrent SQL statements.
        /// </summary>
        string AllConnectionStringHigh { get; set; }
        /// <summary>
        /// The Low database service provides the least level of resources to each SQL statement, but supports the most number of
        /// concurrent SQL statements.
        /// </summary>
        string AllConnectionStringLow { get; set; }
        /// <summary>
        /// The Medium database service provides a lower level of resources to each SQL statement potentially resulting a lower level
        /// of performance, but supports more concurrent SQL statements.
        /// </summary>
        string AllConnectionStringMedium { get; set; }
        /// <summary>
        /// Returns all connection strings that can be used to connect to the Autonomous Database.
        /// </summary>
        Sample.API.Models.IAllConnectionStringType AllConnectionStrings { get; set; }
        /// <summary>
        /// The database service provides the least level of resources to each SQL statement, but supports the most number of concurrent
        /// SQL statements.
        /// </summary>
        string Dedicated { get; set; }
        /// <summary>
        /// The High database service provides the highest level of resources to each SQL statement resulting in the highest performance,
        /// but supports the fewest number of concurrent SQL statements.
        /// </summary>
        string High { get; set; }
        /// <summary>
        /// The Low database service provides the least level of resources to each SQL statement, but supports the most number of
        /// concurrent SQL statements.
        /// </summary>
        string Low { get; set; }
        /// <summary>
        /// The Medium database service provides a lower level of resources to each SQL statement potentially resulting a lower level
        /// of performance, but supports more concurrent SQL statements.
        /// </summary>
        string Medium { get; set; }
        /// <summary>
        /// A list of connection string profiles to allow clients to group, filter and select connection string values based on structured
        /// metadata.
        /// </summary>
        System.Collections.Generic.List<Sample.API.Models.IProfileType> Profiles { get; set; }

    }
}